default constructor-------------------------->

1.class A {
  A(){
    System.out.println("heloo world");
  }
  
 }
public class Basic {
    public static void main (String[] args){
      new A();
      A p=new A();

    }
}

2.class A {
    A(){
      System.out.println("welcome to india");
    }
    
   }
   class B extends A{
    B(){
        System.out.println("how are you");
    }
   }
  public class parameterisedconstructor {
      public static void main (String[] args){
         new B();
      }
  }
  
3.addition--------------------------->

  class A {
  
   A(){
    int a=1;
    int b=2;
    int c=a+b;
    System.out.println("value of c is  : "+c);
   }
    
  }
  
 
public class Basic {
    public static void main (String[] args){
      new A();
    }
}

4.subraction--------------------------------->

  class A {
  
   A(){
    int a=1;
    int b=2;
    int c=a-b;
    System.out.println("value of c is  : "+c);
   }
    
  }
  
 
public class Basic {
    public static void main (String[] args){
      new A();
    }
}

5.multiplication------------------------------->

class A {
  
   A(){
    int a=1;
    int b=2;
    int c=a*b;
    System.out.println("value of c is  : "+c);
   }
    
  }
  
 
public class Basic {
    public static void main (String[] args){ 
    new A();

    }
}

6.division----------------------------<

class A {
  
   A(){
    int a=10;
    int b=2;
    int c=a/b;
    System.out.println("value of c is  : "+c);
   }
    
  }
  
 
 public class Basic {
    public static void main (String[] args){ 
    new A();

    }
}


7.no return and no argument-------------------------->

class A {
    void Show(){
    System.out.println("heloo world");
   }
    
  }
public class Basic {
    public static void main (String[] args){ 
    A p=new A();
    p.Show();

    }
}

return and argument :covariant ------------------------------------>

class A {
    int show(int a){
      System.out.println(a);
      return a;
    }
    A heloo(){
       System.out.println("this is covariant");
       return this;
    }
    
   }
  public class parameterisedconstructor {
      public static void main (String[] args){
        A p =new A();
        p.show(67);
        p.heloo();
      }
  }
  
no return and argument------------------->

class A {
    void show(int a){
      System.out.println(a);
    }
    
   }
  public class parameterisedconstructor {
      public static void main (String[] args){
        A p =new A();
        p.show(67);
      }
  }
  
return and no argument :String------------------------>

class A{
    public  String show1(){
       return "simran";
    }
}
public class parameterisedconst {
    public static void main(String[] args) {
        A p=new A();
        System.out.println(p.show1());
    }
}

parameterised constructor--------------->

1.addition------------------------------->

class A {
    A(int a,int b){
      int c=a+b;
      System.out.println("value of c is : "+c);
    }
    
  }
public class Basic {
    public static void main (String[] args){ 
    A p=new A(2,5);
    }
}

2.subraction-------------------------------->

class A {
    A(int a,int b){
      int c=a-b;
      System.out.println("value of c is : "+c);
    }
    
  }
public class Basic {
    public static void main (String[] args){ 
    A p=new A(2,5);
    }
}

3.multiplication-------------------------------->

class A {
    A(int a,int b){
      int c=a*b;
      System.out.println("value of c is : "+c);
    }
    
  }
public class Basic {
    public static void main (String[] args){ 
    A p=new A(2,5);
    }
}

4.division--------------------------------------->

class A {
    A(int a,int b){
      int c=a/b;
      System.out.println("value of c is : "+c);
    }
    
  }
public class Basic {
    public static void main (String[] args){ 
    A p=new A(10,5);
    }
}

5.class 
	constructor 
	method : no return and no argument 
	method :return and argument :covariant 
	method :no return and argument 
	method :return and no argument :String 


call in Main class--------------------------------------------->

class A{
    void show1(){
        System.out.println("show-1");
    }
    A show2(int a){
      System.out.println("covariant show-2 "+a);
      return this;
    }
    void show3(int a){
        System.out.println("show-3 "+a);
    }
    public  String show4(){
       return "simran";
    }
}
public class parameterisedconst {
    public static void main(String[] args) {
        A p=new A();
        p.show1();
        p.show2(78);
        p.show3(756);
        System.out.println(p.show4());
    }
}


















